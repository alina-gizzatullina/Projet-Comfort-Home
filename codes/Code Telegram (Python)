# ============================================================================
# üêç Ce script est √©crit en Python, PAS pour Arduino !
# Il NE DOIT PAS √™tre utilis√© dans l'IDE Arduino.
# Un lien vers un bot: @maison0204_bot (envoyez-le √† une sorte de chat dans le t√©l√©gramme et cliquez sur ce message qui devrait se transformer en un lien)
#
# üì¶ Utilisation :
# 1. T√©l√©versez d'abord le Code intial (Arduino) sur votre carte (UCA board)
# 2. Fermez le Moniteur s√©rie de l'IDE Arduino
# 3. Lancez ce script Python dans Thonny (ou tout autre √©diteur Python)
#
# üß† Ce script lit les donn√©es du port s√©rie et envoie des alertes via Telegram.
# Il utilise le protocole Telegram Bot API et les ports COM de l'ordinateur.
# ============================================================================


import serial
import requests
import time
import re
import threading

# === Param√®tres ===
bot_token   = "7704509412:AAEgnS_jmAxsF-L44UUucy2Pt9A-MV56Dd8"
chat_id     = "810116867"
port_serie  = "COM3"
vitesse     = 115200
INTERVAL_MIN = 60        # Anti-spam : 60 secondes entre deux alertes identiques
MUTE_DUREE = 3600        # Dur√©e de silence apr√®s appui bouton : 1 heure (en secondes)

# === Variables globales ===
dernier_message = ""
dernier_envoi = 0
silence_jusqua = 0

# === Initialisation du port s√©rie ===
print(f"‚Üí Connexion au port {port_serie}‚Ä¶")
try:
    ser = serial.Serial(port_serie, vitesse, timeout=1)
    time.sleep(2)
    print("‚úî Port s√©rie ouvert.")
except Exception as e:
    print("‚ùå Erreur de connexion s√©rie :", e)
    exit(1)

# === Envoi d'une alerte format√©e √† Telegram ===
def envoyer_telegram(alerte, temp=None, hum=None, lux=None):
    global silence_jusqua
    if time.time() < silence_jusqua:
        print("üîï Alerte ignor√©e (mode silencieux activ√©)")
        return

    texte = "‚ö†Ô∏è *Alerte domotique*\n"
    if temp is not None:
        texte += f"üå° Temp√©rature : *{temp:.1f} ¬∞C*\n"
    if hum is not None:
        texte += f"üíß Humidit√© : *{hum:.1f} %*\n"
    if lux is not None:
        texte += f"üîÜ Luminosit√© : *{lux:.0f} lux*\n"
    texte += f"\nüö® _{alerte}_"

    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": texte,
        "parse_mode": "Markdown",
        "reply_markup": {
            "inline_keyboard": [[
                {"text": "‚ùå D√©sactiver les alertes pendant 1h", "callback_data": "desactiver_alertes"}
            ]]
        }
    }

    try:
        r = requests.post(url, json=data, timeout=5)
        print("üì© Alerte envoy√©e √† Telegram :", alerte)
    except Exception as e:
        print("‚ùå Erreur lors de l'envoi :", e)

# === √âcoute des clics sur les boutons Telegram ===
def ecouter_callbacks():
    global silence_jusqua
    print("‚ñ∂Ô∏è √âcoute des boutons Telegram activ√©e...")
    offset = None
    while True:
        try:
            url = f"https://api.telegram.org/bot{bot_token}/getUpdates"
            params = {"timeout": 10}
            if offset:
                params["offset"] = offset
            r = requests.get(url, params=params)
            data = r.json()

            if "result" in data:
                for update in data["result"]:
                    offset = update["update_id"] + 1

                    if "callback_query" in update:
                        query = update["callback_query"]
                        data_bouton = query["data"]

                        # R√©pondre au clic utilisateur
                        requests.post(f"https://api.telegram.org/bot{bot_token}/answerCallbackQuery",
                                      data={"callback_query_id": query["id"],
                                            "text": "üîï Alertes d√©sactiv√©es pendant 1h."})

                        if data_bouton == "desactiver_alertes":
                            print("üî¥ Mode silencieux activ√© pour 1 heure")
                            silence_jusqua = time.time() + MUTE_DUREE
                            try:
                                requests.post(f"https://api.telegram.org/bot{bot_token}/sendMessage",
                                              data={"chat_id": chat_id,
                                                    "text": "üîï Mode silencieux activ√© pendant 1 heure."})
                            except:
                                pass
        except Exception as e:
            print("‚ùå Erreur dans le thread Telegram :", e)
            time.sleep(2)

# Lancer l'√©coute des boutons dans un thread s√©par√©
threading.Thread(target=ecouter_callbacks, daemon=True).start()

# === Boucle principale : √©coute du port s√©rie ===
print("üîç En attente des alertes Arduino...")
while True:
    try:
        if ser.in_waiting:
            ligne = ser.readline().decode(errors='ignore').strip()
            if ligne.startswith("[ALERTE]"):
                parties = ligne.replace("[ALERTE]", "").strip().split("|")
                message = parties[0].strip()
                temp = hum = lux = None

                for p in parties[1:]:
                    if "temp=" in p:
                        temp = float(re.findall(r"[-+]?\d*\.\d+|\d+", p)[0])
                    elif "hum=" in p:
                        hum = float(re.findall(r"[-+]?\d*\.\d+|\d+", p)[0])
                    elif "lux=" in p:
                        lux = float(re.findall(r"[-+]?\d*\.\d+|\d+", p)[0])

                maintenant = time.time()
                if message != dernier_message or (maintenant - dernier_envoi > INTERVAL_MIN):
                    envoyer_telegram(message, temp, hum, lux)
                    dernier_message = message
                    dernier_envoi = maintenant
                else:
                    print("‚è≥ Message ignor√© (anti-spam actif)")
    except Exception as e:
        print("‚ùå Erreur de lecture s√©rie :", e)
        time.sleep(1)
