#include <Wire.h>
#include <Adafruit_SHTC3.h>
#include <Adafruit_LTR329_LTR303.h>
#include "lcdgfx.h"
#include <FastLED.h>

DisplaySSD1306_128x64_I2C display(-1);
Adafruit_SHTC3 shtc3;
Adafruit_LTR303 ltr;

#define LED_PIN     4
#define NUM_LEDS    21
#define BRIGHTNESS  32
#define LED_TYPE    WS2812
#define COLOR_ORDER GRB
CRGB leds[NUM_LEDS];

// Seuils
#define MIN_HUMIDITY  40
#define MAX_HUMIDITY  70
#define MIN_TEMP      18
#define MAX_TEMP      26
#define LUX_THRESHOLD 50

// Capteur PIR
#define PIR_POWER_PIN A2
#define PIR_SIGNAL_PIN A3

bool lastLightState = false;
unsigned long motionStartTime = 0;
const unsigned long LIGHT_DURATION = 30000; // 30 secondes

void setup() {
  Serial.begin(115200);
  Wire.begin();

  display.begin();
  display.setFixedFont(ssd1306xled_font6x8);
  display.clear();
  
  if (!shtc3.begin()) {
    Serial.println("Erreur : capteur SHTC3 !");
    while(1);
  }

  if (!ltr.begin()) {
    Serial.println("Erreur : capteur LTR303 !");
    while(1);
  }
  ltr.setGain(LTR3XX_GAIN_2);
  ltr.setIntegrationTime(LTR3XX_INTEGTIME_100);
  ltr.setMeasurementRate(LTR3XX_MEASRATE_200);

  // Configuration PIR
  pinMode(PIR_POWER_PIN, OUTPUT);
  digitalWrite(PIR_POWER_PIN, HIGH);
  pinMode(PIR_SIGNAL_PIN, INPUT);

  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS)
    .setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);
  FastLED.clear(true);
  
  delay(1000);
}

void loop() {
  sensors_event_t humEvent, tempEvent;
  shtc3.getEvent(&humEvent, &tempEvent);
  float temp = tempEvent.temperature;
  float hum = humEvent.relative_humidity;
  
  float lux = NAN;
  if (ltr.newDataAvailable()) {
    uint16_t vis_ir, ir;
    ltr.readBothChannels(vis_ir, ir);
    lux = vis_ir - ir;
  }

  handleLighting(lux);
  displayData(temp, hum, lux);
  checkAndSendAlerts(temp, hum, lux);

  delay(2000);
}

void handleLighting(float lux) {
  bool motionDetected = digitalRead(PIR_SIGNAL_PIN);
  bool lowLight = (!isnan(lux) && lux < LUX_THRESHOLD);
  bool shouldLightOn = motionDetected && lowLight;

  // Mise à jour du timer lors de la détection
  if (motionDetected) motionStartTime = millis();

  // Vérification expiration durée éclairage
  bool timeExpired = (millis() - motionStartTime) > LIGHT_DURATION;

  if (shouldLightOn && !timeExpired) {
    if (!lastLightState) {
      Serial.println("[LUMIÈRE] Éclairage activé");
      fill_solid(leds, NUM_LEDS, CRGB::White);
      FastLED.show();
      lastLightState = true;
    }
  } else {
    if (lastLightState) {
      Serial.println("[LUMIÈRE] Éclairage désactivé");
      FastLED.clear();
      FastLED.show();
      lastLightState = false;
    }
  }
}

void displayData(float temp, float hum, float lux) {
  display.clear();
  char buf[32];

  snprintf(buf, sizeof(buf), "Temp : %s", isnan(temp) ? "???" : String(temp, 1).c_str());
  display.printFixed(0, 0, buf, STYLE_NORMAL);

  snprintf(buf, sizeof(buf), "Humid : %s", isnan(hum) ? "???" : String(hum, 1).c_str());
  display.printFixed(0, 10, buf, STYLE_NORMAL);

  snprintf(buf, sizeof(buf), "Lux : %s", isnan(lux) ? "???" : String(lux, 0).c_str());
  display.printFixed(0, 20, buf, STYLE_NORMAL);

  // Affichage statut lumière
  display.printFixed(0, 30, lastLightState ? "Light: ON " : "Light: OFF", STYLE_BOLD);
}

void checkAndSendAlerts(float temp, float hum, float lux) {
  if (!isnan(hum)) {
    if (hum < MIN_HUMIDITY) sendAlert("l'humidificateur");
    else if (hum > MAX_HUMIDITY) sendAlert("le déshumidificateur");
  }
  if (!isnan(temp)) {
    if (temp < MIN_TEMP) sendAlert("le chauffage");
    else if (temp > MAX_TEMP) sendAlert("la climatisation");
  }
}

void sendAlert(const char* device) {
  Serial.print("[ALERTE] Il faut activer ");
  Serial.println(device);
}
