#include <Wire.h>
#include <Adafruit_SHTC3.h>
#include <Adafruit_LTR329_LTR303.h>
#include <RH_RF95.h>
#include "lcdgfx.h"

// OLED
DisplaySSD1306_128x64_I2C display(-1);

// Датчики
Adafruit_SHTC3 shtc3;
Adafruit_LTR303 ltr;

// LoRa
RH_RF95 rf95(10, 3);  // CS=10, INT=3

// Пороговые значения
#define MIN_HUMIDITY  40
#define MAX_HUMIDITY  70
#define MIN_TEMP      18
#define MAX_TEMP      26
#define LUX_THRESHOLD 50

void setup() {
  Serial.begin(115200);
  Wire.begin();

  // OLED
  display.begin();
  display.setFixedFont(ssd1306xled_font6x8);
  display.clear();
  display.printFixed(0, 0, "OLED ready", STYLE_NORMAL);

  // SHTC3
  if (!shtc3.begin()) {
    Serial.println("Err: SHTC3");
    display.printFixed(0, 10, "Err: SHTC3", STYLE_BOLD);
    while (1);
  }

  // LTR303
  if (!ltr.begin()) {
    Serial.println("Err: LTR303");
    display.printFixed(0, 20, "Err: LTR303", STYLE_BOLD);
    while (1);
  }
  ltr.setGain(LTR3XX_GAIN_2);
  ltr.setIntegrationTime(LTR3XX_INTEGTIME_100);
  ltr.setMeasurementRate(LTR3XX_MEASRATE_200);

  // LoRa
  if (!rf95.init()) {
    Serial.println("Err: LoRa");
    display.printFixed(0, 30, "Err: LoRa", STYLE_BOLD);
    while (1);
  }
  rf95.setFrequency(868.0);

  delay(1000);
  display.clear();
}

void loop() {
  sensors_event_t humEvent, tempEvent;
  shtc3.getEvent(&humEvent, &tempEvent);
  float temp = tempEvent.temperature;
  float hum = humEvent.relative_humidity;

  float lux = NAN;
  if (ltr.newDataAvailable()) {
    uint16_t vis_ir, ir;
    if (ltr.readBothChannels(vis_ir, ir)) {
      lux = float(vis_ir - ir);
    }
  }

  displayData(temp, hum, lux);
  checkAndSendAlerts(temp, hum, lux);

  delay(3000);
}

void displayData(float temp, float hum, float lux) {
  display.clear();
  char buf[32];

  snprintf(buf, sizeof(buf), "Temp: %s", isnan(temp) ? "???" : String(temp, 1).c_str());
  display.printFixed(0, 0, buf, STYLE_NORMAL);

  snprintf(buf, sizeof(buf), "Hum : %s", isnan(hum) ? "???" : String(hum, 1).c_str());
  display.printFixed(0, 10, buf, STYLE_NORMAL);

  snprintf(buf, sizeof(buf), "Lux : %s", isnan(lux) ? "???" : String(lux, 0).c_str());
  display.printFixed(0, 20, buf, STYLE_NORMAL);
}

void checkAndSendAlerts(float temp, float hum, float lux) {
  if (!isnan(hum)) {
    if (hum < MIN_HUMIDITY) sendLoRaAlert("Увлажнитель");
    else if (hum > MAX_HUMIDITY) sendLoRaAlert("Осушитель");
  }
  if (!isnan(temp)) {
    if (temp < MIN_TEMP) sendLoRaAlert("Обогреватель");
    else if (temp > MAX_TEMP) sendLoRaAlert("Кондиционер");
  }
  if (!isnan(lux) && lux < LUX_THRESHOLD) {
    sendLoRaAlert("Люстра");
  }
}

void sendLoRaAlert(const char* msg) {
  rf95.send((uint8_t*)msg, strlen(msg));
  rf95.waitPacketSent();
  Serial.println("Sent: " + String(msg));
}
